/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sort;

import java.util.Arrays;

public class App {
  public static void main(String[] args) {
    int[] array = new int[]{8,4,23,42,16,15};
//    int[] array = new int[]{5, 2};
//    insertionSort(array);
//    mergeSort(array);
    quickSort(array);
    System.out.println(Arrays.toString(array));
  }

  public static void insertionSort(int[] array){
    for(int i = 1; i < array.length; i++){
      int j = i -1;
      int temp = array[i];

      while (j >= 0 && temp < array[j]){
          array[j + 1] = array[j];
        j -= 1;
      }
      array[j + 1] = temp;
    }
  }

  public static void mergeSort(int[] arr){
    int length = arr.length;

    if(length > 1){
      int mid = length / 2;
      int[] left = Arrays.copyOfRange(arr, 0, mid);
      int[] right = Arrays.copyOfRange(arr, mid, length);

      System.out.println( "in mergeSort left: " + Arrays.toString(left));
      System.out.println( "in mergeSort right: " + Arrays.toString(right));

      mergeSort(left);
      mergeSort(right);
      merge(left, right, arr);
    }
  }

  private static void merge(int[] left, int[] right, int[] arr){
    int i = 0, j = 0, k =0;

    while(i < left.length && j < right.length){
      if(left[i] <= right[j]){
        arr[k] = left[i];
        i++;
        System.out.println( "in merge left: " + Arrays.toString(left));
        System.out.println( "in merge array: " + Arrays.toString(arr));
      }else{
        arr[k] = right[j];
        j++;
        System.out.println( "in merge right: " + Arrays.toString(left));
        System.out.println( "in merge array: " + Arrays.toString(arr));
      }
      k++;
    }

    while (i < left.length){
      arr[k] = left[i];
      i++;
      k++;
      System.out.println( "in merge left: " + Arrays.toString(left));
      System.out.println( "in merge array: " + Arrays.toString(arr));
    }

    while(j < right.length){
      arr[k] = right[j];
      j++;
      k++;
      System.out.println( "in merge right: " + Arrays.toString(left));
      System.out.println( "in merge array: " + Arrays.toString(arr));
    }
  }

  public static void quickSort(int[] array){
    if(array.length > 0)
      quickSort(array, 0, array.length - 1);
  }

  public static void quickSort(int[] arr, int left, int right){
    if(left < right){
      int p = partition(arr, left, right);

      quickSort(arr, left, p - 1);
      quickSort(arr, p + 1, right);
    }
  }

  private static int partition(int[] arr, int left, int right) {
    int pivot = arr[right];

    int low = left - 1;
    for(int i = left; i < right; i++){
      if(arr[i] <= pivot){
        low++;
        swap(arr, i, low);
      }
    }

    swap(arr, right, low + 1);
    return low + 1;
  }

  private static void swap(int[] arr, int i, int low) {
    int temp = arr[i];
    arr[i] = arr[low];
    arr[low] = temp;
  }
}
