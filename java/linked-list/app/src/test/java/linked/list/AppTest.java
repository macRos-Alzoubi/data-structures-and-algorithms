/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

  @Test
  public void isEmpty() {
    LinkedList list = new LinkedList();
    assertNull(list.getHead(), "When instantiating liked list object it should be empty");
  }

  @Test
  public void canInsert() {
    LinkedList list = new LinkedList();
    list.insert("macRosX");
    assertTrue(list.includes("macRosX"), "The method should return true");
  }

  @Test
  public void isFirst(){
    LinkedList list = new LinkedList();
    list.insert("A");
    list.insert("B");
    list.insert("C");
    assertEquals("C", list.getHead().getData(), "The method should return 'C'");
  }

  @Test
  public void insertMultiple(){
    LinkedList list = new LinkedList();
    list.insert("A");
    list.insert("B");
    list.insert("C");
    assertTrue(list.includes("A"), "The method should return true");
    assertTrue(list.includes("B"), "The method should return true");
    assertTrue(list.includes("C"), "The method should return true");
  }

  @Test
  public void isFund(){
    LinkedList list = new LinkedList();
    list.insert("S");
    assertTrue(list.includes("S"), "The method should return true");
  }

  @Test
  public void isNtFund(){
    LinkedList list = new LinkedList();
    list.insert("S");
    list.insert("A");
    assertFalse(list.includes("B"), "The method should return true");
  }

  @Test
  public void getCollection(){
    LinkedList list = new LinkedList();
    list.insert("S");
    list.insert("A");
    list.insert("D");
    list.insert("G");
    assertEquals("Head -> G -> D -> A -> S -> NULL", list.toString(), "");
  }

  @Test
  public void addAtEnd(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");

    assertEquals("Head -> X -> Y -> NULL", list.toString(),"Method should insert at the end of the liked list");
  }

  @Test
  public void addMultipleAtEnd(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    assertEquals("Head -> X -> Y -> Z -> NULL", list.toString(),"Method should insert at the end of the liked list");
  }

  @Test
  public void insertBefore(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    assertTrue(list.insertBefore("Y", "W"),"Method should insert 'W' before 'Y'");
    System.out.println(list);
  }

  @Test
  public void insertBeforeFirst(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    assertTrue(list.insertBefore("X", "W"),"Method should insert 'W' before 'X'");
    System.out.println(list);
  }

  @Test
  public void insertAfter(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    assertTrue(list.insertAfter("Y", "W"),"Method should insert 'W' after 'Y'");
    System.out.println(list);
  }

  @Test
  public void insertAfterLast(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    assertTrue(list.insertAfter("Z", "W"),"Method should insert 'W' after 'Z'");
    System.out.println(list);
  }

  @Test
  public void greaterThanLength(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");
    String outOfRange = list.kthFromEnd(5);

    assertEquals(outOfRange, list.kthFromEnd(5), "The Kth index should be within the list range");
  }

  @Test
  public void KthTheSamAsLength(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    assertEquals("X", list.kthFromEnd(2), "The method should return the first element in the list");
  }

  @Test
  public void negativeKth(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");

    String exceptionMsg = list.kthFromEnd(5);
    assertEquals("5 is out of the list range (0 - 2)",exceptionMsg, "The Kth should be valid value");
  }

  @Test
  public void sizeOne(){
    LinkedList list = new LinkedList();
    list.append("X");
    assertEquals("X", list.kthFromEnd(0), "The method should return X");
  }

  @Test
  public void inMiddle(){
    LinkedList list = new LinkedList();
    list.append("X");
    list.append("Y");
    list.append("Z");
    list.append("XX");
    list.append("GH");
    list.append("XY");

    assertEquals("XX", list.kthFromEnd(2), "The method should return XX");
  }

}
