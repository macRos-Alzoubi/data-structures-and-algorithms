/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import graph.structure.Graph;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

  @Test
  public void canAddNode() {
    Graph<String> graph = new Graph<>();

    assertNotNull(graph.addNode("A"));
  }

  @Test
  public void canAddEdge() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");

    graph.addEdge("A", "B", 45);

    assertNotNull(graph.getNeighbors("A"));
  }

  @Test
  public void getAllNodes() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");

    assertNotNull(graph.getNodes());
  }

  @Test
  public void getAllNeighbors() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");

    graph.addEdge("A", "B", 45);

    assertNotNull(graph.getNeighbors("A"));
  }

  @Test
  public void getAllNeighborsWithWight() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");

    graph.addEdge("A", "B", 45);

    assertNotNull(graph.getNeighbors("A"));
  }

  @Test
  public void getGraphSize() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");

    assertEquals(2, graph.size());
  }

  @Test
  public void getOneNode() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addEdge("A", "A", 0);

    assertNotNull(graph.getNeighbors("A"));
  }

  @Test
  public void emptyGraph() {
    Graph<String> graph = new Graph<>();
    assertNull(graph.getNodes());
  }

  @Test
  public void BFSGraph() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");
    graph.addNode("C");

    graph.addEdge("A", "B", 45);
    graph.addEdge("A", "C", 45);

    assertNotNull(graph.breadthFirstSearch("B"));
  }

  @Test
  public void canFail() {
    Graph<String> graph = new Graph<>();
    graph.addNode("A");
    graph.addNode("B");
    graph.addNode("C");

    graph.addEdge("A", "B", 45);
    graph.addEdge("A", "C", 45);

    assertEquals(new HashSet<>(), graph.breadthFirstSearch(""));
  }

  @Test
  public void edgeCase() {
    Graph<String> graph = new Graph<>();
    assertEquals(new HashSet<>(), graph.breadthFirstSearch("D"));
  }

  @Test
  public void businessTripOkTest() {
    Graph<String> graph = new Graph<>();
    List<String> cities = new ArrayList<>();
    graph.addNode("A");
    graph.addNode("B");
    graph.addNode("C");
    graph.addNode("D");

    graph.addEdge("A", "B", 25);
    graph.addEdge("A", "C", 15);
    graph.addEdge("C", "D", 35);

    cities.add("A");
    cities.add("C");
    cities.add("D");

    assertEquals("True, 50$", App.businessTrip(graph, cities));
  }

  @Test
  public void businessTripFailTest() {
    Graph<String> graph = new Graph<>();
    List<String> cities = new ArrayList<>();
    graph.addNode("A");
    graph.addNode("B");
    graph.addNode("C");
    graph.addNode("D");

    graph.addEdge("A", "B", 25);
    graph.addEdge("A", "C", 15);
    graph.addEdge("C", "D", 35);

    cities.add("A");
    cities.add("C");
    cities.add("B");

    assertEquals("False, $0", App.businessTrip(graph, cities));
  }
}
