/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Tree;

import BST.BTS;
import K_Ary_Tree.KAryTree;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
  @Test
  public void canInstantiate() {
    BTS<Integer> integerBTS = new BTS<>();

    assertTrue(integerBTS.isEmpty());
  }

  @Test
  public void hasOneNode() {
    BTS<Integer> integerBTS = new BTS<>();

    integerBTS.add(45);
    assertFalse(integerBTS.isEmpty());
  }

  @Test
  public void canAddLiftAndRightNode() {
    BTS<Integer> integerBTS = new BTS<>();

    integerBTS.add(45);
    integerBTS.add(50);
    integerBTS.add(43);

    assertEquals(50, integerBTS.getRoot().getRight().getData(), "The Method should add to the lift and to the right sides");
    assertEquals(43, integerBTS.getRoot().getLeft().getData(), "The Method should add to the lift and to the right sides");
  }

  @Test
  public void findMaxTester() {
    BTS<Integer> integerBTS = new BTS<>();

    integerBTS.add(45);
    integerBTS.add(50);
    integerBTS.add(43);

    try {
      assertEquals(50, integerBTS.findMax(), "The method should return the maximum value");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  public void breadthFirstTester() {
    BTS<Integer> integerBTS = new BTS<>();
    integerBTS.add(44);
    integerBTS.add(4);
    integerBTS.add(63);
    integerBTS.add(22);
    integerBTS.add(34);
    integerBTS.add(72);

    try {
      assertEquals("[Node{data=44}, Node{data=4}, Node{data=63}, Node{data=22}, Node{data=72}, Node{data=34}]", BTS.breadthFirst(integerBTS).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Test
  public void fizzBuzzTree() {
    List<Integer> list = new ArrayList<>();
    list.add(10);
    list.add(5);
    list.add(15);
    list.add(3);
    list.add(2);
    list.add(3);
    list.add(7);
    list.add(45);
    KAryTree<Integer> kAryTree = new KAryTree<>(list, 3);
    kAryTree.treeFizzBuzz();
    assertEquals("KAryTree{KAryTreeNodes=[KAryNode{data=Buzz}, KAryNode{data=Buzz}, KAryNode{data=FizzBuzz}, KAryNode{data=Fizz}, KAryNode{data=2}, KAryNode{data=Fizz}, KAryNode{data=7}, KAryNode{data=FizzBuzz}]}",
      kAryTree.toString());
  }
}
